//fcfs
#include <stdio.h>

#define n 4

int at[n], bt[n], ct[n], tat[n], wt[n];

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}


void sortProcesses() {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (at[j] > at[j + 1]) {
                swap(&at[j], &at[j + 1]);
                swap(&bt[j], &bt[j + 1]);
            }
        }
    }
}

void main() {
    float wtavg = 0.0, tatavg = 0.0;

    for (int i = 0; i < n; i++) {
        printf("Enter Arrival Time for Process %d: ", i + 1);
        scanf("%d", &at[i]);

        printf("Enter Burst Time for Process %d: ", i + 1);
        scanf("%d", &bt[i]);
    }

    sortProcesses();

    int time = 0;
    for (int i = 0; i < n; i++) {
        if (time < at[i]) {
            time = at[i];
        }
        ct[i] = time + bt[i];
        time = ct[i];

        tat[i] = ct[i] - at[i];
        wt[i] = tat[i] - bt[i];

        tatavg += tat[i];
        wtavg += wt[i];
    }


    tatavg /= n;
    wtavg /= n;


    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", i + 1, at[i], bt[i], ct[i], tat[i], wt[i]);
    }


    printf("\nAverage Turnaround Time (TAT): %.2f\n", tatavg);
    printf("Average Waiting Time (WT): %.2f\n", wtavg);
}



//SJC(shortest job first)

#include <stdio.h>
#include <stdlib.h>

#define n 4

int at[n], bt[n], ct[n], tat[n], wt[n], pt[n];
float wtavg, tatavg;

int main() {
    wtavg = tatavg = 0.0;


    for (int i = 0; i < n; i++) {
        printf("Enter process number for Process %d: ", i + 1);
        scanf("%d", &pt[i]);
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &at[i]);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &bt[i]);
    }

    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (at[i] > at[j]) {
                int temp = at[i]; at[i] = at[j]; at[j] = temp;
                temp = bt[i]; bt[i] = bt[j]; bt[j] = temp;
                temp = pt[i]; pt[i] = pt[j]; pt[j] = temp;
            }
        }
    }


    ct[0] = at[0] + bt[0];
    for (int i = 1; i < n; i++) {
        ct[i] = (ct[i - 1] > at[i]) ? ct[i - 1] + bt[i] : at[i] + bt[i];
    }


    for (int i = 0; i < n; i++) {
        tat[i] = ct[i] - at[i];        // Turnaround Time = Completion Time - Arrival Time
        wt[i] = tat[i] - bt[i];         // Waiting Time = Turnaround Time - Burst Time
        tatavg += tat[i];
        wtavg += wt[i];
    }

    tatavg /= n;
    wtavg /= n;

    printf("\n%-10s%-10s%-10s%-10s%-10s\n", "Arrival", "Burst", "Completion", "Turnaround", "Waiting");
    for (int i = 0; i < n; i++) {
        printf("%-10d%-10d%-10d%-10d%-10d\n", at[i], bt[i], ct[i], tat[i], wt[i]);
    }
    printf("\nAverage Turnaround Time (TAT): %.2f\n", tatavg);
    printf("Average Waiting Time (WT): %.2f\n", wtavg);

    return 0;
}










